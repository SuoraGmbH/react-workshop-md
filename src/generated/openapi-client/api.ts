/* tslint:disable */
/* eslint-disable */
/**
 * Time Tracker
 * This describes the backend of a very basic time tracker.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface TimeEntry
 */
export interface TimeEntry {
    /**
     * 
     * @type {string}
     * @memberof TimeEntry
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof TimeEntry
     */
    'comment': string;
    /**
     * 
     * @type {string}
     * @memberof TimeEntry
     */
    'start': string;
    /**
     * 
     * @type {string}
     * @memberof TimeEntry
     */
    'end': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new time entry
         * @param {TimeEntry} body TimeEntry object that should be stored
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTimeEntry: async (body: TimeEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('addTimeEntry', 'body', body)
            const localVarPath = `/timeEntries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a time entry
         * @param {number} timeEntryId Time entry id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTimeEntry: async (timeEntryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timeEntryId' is not null or undefined
            assertParamExists('deleteTimeEntry', 'timeEntryId', timeEntryId)
            const localVarPath = `/timeEntries/{timeEntryId}`
                .replace(`{${"timeEntryId"}}`, encodeURIComponent(String(timeEntryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all time entries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeEntries: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/timeEntries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single time entry
         * @summary Find time entry by ID
         * @param {number} timeEntryId ID of time entry to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeEntryById: async (timeEntryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timeEntryId' is not null or undefined
            assertParamExists('getTimeEntryById', 'timeEntryId', timeEntryId)
            const localVarPath = `/timeEntries/{timeEntryId}`
                .replace(`{${"timeEntryId"}}`, encodeURIComponent(String(timeEntryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing time entry
         * @param {TimeEntry} body time entry object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTimeEntry: async (body: TimeEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateTimeEntry', 'body', body)
            const localVarPath = `/timeEntries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new time entry
         * @param {TimeEntry} body TimeEntry object that should be stored
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addTimeEntry(body: TimeEntry, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addTimeEntry(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes a time entry
         * @param {number} timeEntryId Time entry id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTimeEntry(timeEntryId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTimeEntry(timeEntryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all time entries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTimeEntries(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TimeEntry>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTimeEntries(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a single time entry
         * @summary Find time entry by ID
         * @param {number} timeEntryId ID of time entry to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTimeEntryById(timeEntryId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTimeEntryById(timeEntryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing time entry
         * @param {TimeEntry} body time entry object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTimeEntry(body: TimeEntry, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTimeEntry(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new time entry
         * @param {TimeEntry} body TimeEntry object that should be stored
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTimeEntry(body: TimeEntry, options?: any): AxiosPromise<void> {
            return localVarFp.addTimeEntry(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a time entry
         * @param {number} timeEntryId Time entry id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTimeEntry(timeEntryId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTimeEntry(timeEntryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all time entries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeEntries(options?: any): AxiosPromise<Array<TimeEntry>> {
            return localVarFp.getTimeEntries(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single time entry
         * @summary Find time entry by ID
         * @param {number} timeEntryId ID of time entry to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeEntryById(timeEntryId: number, options?: any): AxiosPromise<TimeEntry> {
            return localVarFp.getTimeEntryById(timeEntryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing time entry
         * @param {TimeEntry} body time entry object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTimeEntry(body: TimeEntry, options?: any): AxiosPromise<void> {
            return localVarFp.updateTimeEntry(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Add a new time entry
     * @param {TimeEntry} body TimeEntry object that should be stored
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addTimeEntry(body: TimeEntry, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addTimeEntry(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes a time entry
     * @param {number} timeEntryId Time entry id to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteTimeEntry(timeEntryId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteTimeEntry(timeEntryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all time entries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTimeEntries(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getTimeEntries(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a single time entry
     * @summary Find time entry by ID
     * @param {number} timeEntryId ID of time entry to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTimeEntryById(timeEntryId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getTimeEntryById(timeEntryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing time entry
     * @param {TimeEntry} body time entry object that needs to be added to the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateTimeEntry(body: TimeEntry, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateTimeEntry(body, options).then((request) => request(this.axios, this.basePath));
    }
}


